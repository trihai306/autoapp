'use server'

import { apiPurchaseServicePackage } from '@/services/service-package/ServicePackagePaymentService'
import { withAuthCheck } from '@/utils/withAuthCheck'
import { handleServerActionError } from '@/utils/serverActionErrorHandler'

/**
 * Server Action ƒë·ªÉ mua g√≥i d·ªãch v·ª•
 * @param {Object} data - D·ªØ li·ªáu mua g√≥i
 * @param {number} data.service_package_id - ID g√≥i d·ªãch v·ª•
 * @param {string} [data.payment_method] - Ph∆∞∆°ng th·ª©c thanh to√°n
 * @param {string} [data.notes] - Ghi ch√∫
 * @returns {Promise<Object>} K·∫øt qu·∫£ mua g√≥i
 */
export default async function purchaseServicePackage(data) {
    return withAuthCheck(async () => {
        try {
            console.log('üîç [DEBUG] purchaseServicePackage called with data:', data)
            
            // Validation
            if (!data.service_package_id) {
                console.log('‚ùå [DEBUG] Invalid service_package_id')
                return {
                    success: false,
                    message: 'ID g√≥i d·ªãch v·ª• kh√¥ng h·ª£p l·ªá'
                }
            }

            console.log('üì° [DEBUG] Calling API with data:', data)
            const response = await apiPurchaseServicePackage(data)
            console.log('‚úÖ [DEBUG] API response:', response)
            
            return {
                success: true,
                data: response,
                message: 'Mua g√≥i d·ªãch v·ª• th√†nh c√¥ng'
            }
        } catch (error) {
            console.error('‚ùå [DEBUG] Error in purchaseServicePackage:', error)
            return handleServerActionError(error, 'Mua g√≥i d·ªãch v·ª• th·∫•t b·∫°i')
        }
    })
}
